const e=JSON.parse('{"key":"v-d81d3242","path":"/interview/js/function_cache.html","title":"Javascript 中如何实现函数缓存？应用场景？","lang":"zh-CN","frontmatter":{"description":"Javascript 中如何实现函数缓存？应用场景？ 如何实现函数缓存？ 在 JavaScript 中，函数缓存（Memoization）是一种优化技术，旨在将函数的计算结果缓存起来，避免重复计算。它常用于需要反复计算相同结果的函数，尤其是在高成本的计算过程中。","head":[["meta",{"property":"og:url","content":"https://CCCdk.github.io/interview/js/function_cache.html"}],["meta",{"property":"og:site_name","content":"DK 酱"}],["meta",{"property":"og:title","content":"Javascript 中如何实现函数缓存？应用场景？"}],["meta",{"property":"og:description","content":"Javascript 中如何实现函数缓存？应用场景？ 如何实现函数缓存？ 在 JavaScript 中，函数缓存（Memoization）是一种优化技术，旨在将函数的计算结果缓存起来，避免重复计算。它常用于需要反复计算相同结果的函数，尤其是在高成本的计算过程中。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-21T14:03:27.000Z"}],["meta",{"property":"article:author","content":"DK 酱"}],["meta",{"property":"article:modified_time","content":"2025-03-21T14:03:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javascript 中如何实现函数缓存？应用场景？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-21T14:03:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DK 酱\\",\\"url\\":\\"https://github.com/CCCdk\\"}]}"]]},"headers":[{"level":2,"title":"如何实现函数缓存？","slug":"如何实现函数缓存","link":"#如何实现函数缓存","children":[{"level":3,"title":"1. 使用对象和闭包实现缓存","slug":"_1-使用对象和闭包实现缓存","link":"#_1-使用对象和闭包实现缓存","children":[]},{"level":3,"title":"2. 使用 Map 实现缓存","slug":"_2-使用-map-实现缓存","link":"#_2-使用-map-实现缓存","children":[]},{"level":3,"title":"3. 使用 WeakMap 实现缓存","slug":"_3-使用-weakmap-实现缓存","link":"#_3-使用-weakmap-实现缓存","children":[]}]},{"level":2,"title":"函数缓存的应用场景","slug":"函数缓存的应用场景","link":"#函数缓存的应用场景","children":[{"level":3,"title":"1. 昂贵的计算函数","slug":"_1-昂贵的计算函数","link":"#_1-昂贵的计算函数","children":[]},{"level":3,"title":"2. 具有有限且高度重复输入范围的函数","slug":"_2-具有有限且高度重复输入范围的函数","link":"#_2-具有有限且高度重复输入范围的函数","children":[]},{"level":3,"title":"3. 递归函数","slug":"_3-递归函数","link":"#_3-递归函数","children":[]},{"level":3,"title":"4. 纯函数","slug":"_4-纯函数","link":"#_4-纯函数","children":[]}]},{"level":2,"title":"不适合使用缓存的场景","slug":"不适合使用缓存的场景","link":"#不适合使用缓存的场景","children":[]}],"git":{"createdTime":1742565807000,"updatedTime":1742565807000,"contributors":[{"name":"CCCdk","email":"chendongkai@cn.net.ntes","commits":1}]},"readingTime":{"minutes":4.07,"words":1220},"filePathRelative":"interview/js/function_cache.md","localizedDate":"2025年3月21日","excerpt":"<h1> Javascript 中如何实现函数缓存？应用场景？</h1>\\n<h2> 如何实现函数缓存？</h2>\\n<p>在 JavaScript 中，函数缓存（Memoization）是一种优化技术，旨在将函数的计算结果缓存起来，避免重复计算。它常用于需要反复计算相同结果的函数，尤其是在高成本的计算过程中。</p>","autoDesc":true}');export{e as data};
