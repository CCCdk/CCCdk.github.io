import{_ as i,o as e,c as n,a}from"./app-TWZGyvbL.js";const s="/assets/system-design-87-tTEejZPQ.png",t="/assets/system-design-88-r-R3hjhV.png",r="/assets/system-design-89-7Hb0gRze.png",l="/assets/system-design-90-NiiMoPTx.png",d="/assets/system-design-91-FzZztDHH.png",o="/assets/system-design-92-sjhZK6pj.png",g="/assets/system-design-93-EmqOYGu-.png",c="/assets/system-design-94-5KctE2B9.png",u="/assets/system-design-95-wanY3IW6.png",h="/assets/system-design-96-xO7Sbuni.png",p="/assets/system-design-97-fCaxevB2.png",m="/assets/system-design-98-bjUYbVN9.png",f="/assets/system-design-99-8hs7cFUV.png",v={},b=a('<h1 id="_10-设计通知系统" tabindex="-1"><a class="header-anchor" href="#_10-设计通知系统" aria-hidden="true">#</a> 10. 设计通知系统</h1><p>通知系统是许多应用程序的常见功能，用于向用户推送重要新闻、产品更新、事件提醒等信息。</p><p>通知有多种形式：</p><ul><li>移动端推送通知</li><li>短信</li><li>邮件</li></ul><h2 id="第一步-理解问题并确定设计范围" tabindex="-1"><a class="header-anchor" href="#第一步-理解问题并确定设计范围" aria-hidden="true">#</a> 第一步：理解问题并确定设计范围</h2><ul><li><strong>候选人</strong>：系统支持哪些类型的通知？</li><li><strong>面试官</strong>：推送通知、短信、电子邮件</li><li><strong>候选人</strong>：它是实时系统吗？</li><li><strong>面试官</strong>：软实时：尽量快速发送，但在高负载下允许一定延迟。</li><li><strong>候选人</strong>：支持哪些设备？</li><li><strong>面试官</strong>：iOS、Android、PC。</li><li><strong>候选人</strong>：通知由什么触发？</li><li><strong>面试官</strong>：通知可以由客户端应用程序触发，也可以在服务器端触发。</li><li><strong>候选人</strong>：用户是否可以选择退出？</li><li><strong>面试官</strong>：是</li><li><strong>候选人</strong>：每天有多少条通知？</li><li><strong>面试官</strong>：1000 万条移动端推送、100 万条短信、500 万封电子邮件</li></ul><h2 id="第二步-提出高层设计并获得认可" tabindex="-1"><a class="header-anchor" href="#第二步-提出高层设计并获得认可" aria-hidden="true">#</a> 第二步：提出高层设计并获得认可</h2><p>现在可以开始探讨通知系统的高层设计了。</p><h3 id="各种通知类型" tabindex="-1"><a class="header-anchor" href="#各种通知类型" aria-hidden="true">#</a> 各种通知类型</h3><p>不同类型的通知是如何实现的？</p><h4 id="ios-推送通知" tabindex="-1"><a class="header-anchor" href="#ios-推送通知" aria-hidden="true">#</a> iOS 推送通知</h4><figure><img src="'+s+`" alt="ios-push-notifications" tabindex="0" loading="lazy"><figcaption>ios-push-notifications</figcaption></figure><ul><li><p><strong>提供者</strong>：构建并发送通知请求到 Apple 推送通知服务 (APNs)。为此，它需要以下输入：</p><ul><li><strong>设备令牌</strong>：用于发送推送通知的唯一标识符。</li><li><strong>负载</strong>：通知的 JSON 负载，例如：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
   &quot;aps&quot;:{
      &quot;alert&quot;:{
         &quot;title&quot;:&quot;游戏请求&quot;,
         &quot;body&quot;:&quot;Bob 想和你组队&quot;,
         &quot;action-loc-key&quot;:&quot;PLAY&quot;
      },
      &quot;badge&quot;:5
   }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>APNs</strong> - 苹果提供的服务，用于发送移动推送通知。</p></li><li><p><strong>iOS 设备</strong> - 接收推送通知的客户端。</p></li></ul><h4 id="android-推送通知" tabindex="-1"><a class="header-anchor" href="#android-推送通知" aria-hidden="true">#</a> Android 推送通知</h4><p>采用类似方法，但使用 Firebase Cloud Messaging (FCM) 作为 APNs 的替代方案。</p><figure><img src="`+t+'" alt="android-push-notifications" tabindex="0" loading="lazy"><figcaption>android-push-notifications</figcaption></figure><h4 id="短信" tabindex="-1"><a class="header-anchor" href="#短信" aria-hidden="true">#</a> 短信</h4><p>利用第三方提供商如 Twilio 发送。</p><figure><img src="'+r+'" alt="sms-messages" tabindex="0" loading="lazy"><figcaption>sms-messages</figcaption></figure><h4 id="邮件" tabindex="-1"><a class="header-anchor" href="#邮件" aria-hidden="true">#</a> 邮件</h4><p>虽然客户可以设置自己的邮件服务器，但大多数客户选择使用第三方服务，例如 Mailchimp:</p><figure><img src="'+l+'" alt="email-sending" tabindex="0" loading="lazy"><figcaption>email-sending</figcaption></figure><p>这是包含所有通知提供商后的最终设计:</p><figure><img src="'+d+'" alt="notification-providers-design" tabindex="0" loading="lazy"><figcaption>notification-providers-design</figcaption></figure><h3 id="联系信息收集" tabindex="-1"><a class="header-anchor" href="#联系信息收集" aria-hidden="true">#</a> 联系信息收集</h3><p>为了发送通知，需要先收集一些来自用户的输入。这通常在用户注册时完成：</p><figure><img src="'+o+'" alt="contact-info-gathering" tabindex="0" loading="lazy"><figcaption>contact-info-gathering</figcaption></figure><p>存储联系信息的数据库表格示例：</p><figure><img src="'+g+'" alt="contact-info-db" tabindex="0" loading="lazy"><figcaption>contact-info-db</figcaption></figure><h3 id="通知发送-接收流程" tabindex="-1"><a class="header-anchor" href="#通知发送-接收流程" aria-hidden="true">#</a> 通知发送/接收流程</h3><p>这是通知系统的高层设计：</p><figure><img src="'+c+'" alt="high-level-design" tabindex="0" loading="lazy"><figcaption>high-level-design</figcaption></figure><ul><li><strong>服务 1 到 N</strong> - 系统中的其他服务或定时任务触发通知发送事件。</li><li><strong>通知系统</strong> - 接收通知发送消息，并将其传播到正确的提供者。</li><li><strong>第三方服务</strong> - 负责通过适当的媒介将消息发送给正确的用户。此部分应该具备可扩展性，以便在将来更换第三方服务提供商时进行调整。</li><li><strong>iOS、Android、SMS、Email</strong> - 用户在其设备上接收通知。</li></ul><p>此设计中的一些问题：</p><ul><li><strong>单点故障</strong> - 只有单一的通知服务。</li><li><strong>难以扩展</strong> - 由于通知系统处理所有事务，独立扩展缓存、数据库、服务层等比较困难。</li><li><strong>性能瓶颈</strong> - 将所有任务集中处理可能会成为瓶颈，特别是对于像构建 HTML 页面这种资源密集型的任务。</li></ul><h3 id="高层设计-改进版" tabindex="-1"><a class="header-anchor" href="#高层设计-改进版" aria-hidden="true">#</a> 高层设计（改进版）</h3><p>相较于原始的简单设计，为解决单点故障、性能瓶颈等问题，进行了以下改进：</p><ul><li>将数据库和缓存移出通知服务</li><li>添加更多通知服务器并设置自动扩展与负载均衡</li><li>引入消息队列以解耦系统组件</li></ul><figure><img src="'+u+`" alt="high-level-design-improved" tabindex="0" loading="lazy"><figcaption>high-level-design-improved</figcaption></figure><ul><li><strong>服务 1 到 N</strong> - 系统中发送通知的其他服务。</li><li><strong>通知服务器</strong> - 提供发送通知的 API，面向内部服务或已验证的客户端，进行基本验证，获取通知模板并从数据库中取出，讲通知数据放入消息队列进行并行处理。</li><li><strong>缓存</strong> - 存储用户信息、设备信息、通知模板等。</li><li><strong>数据库</strong> - 存储有关用户、通知、设置等数据。</li><li><strong>消息队列</strong> - 消除组件之间的依赖，作为缓冲区以等待通知发送。每个通知提供商都有一个独立的消息队列，避免单个第三方提供商的故障影响其他提供商。</li><li><strong>工作进程</strong> - 从消息队列中拉取通知事件，并将其发送到相应的第三方服务。</li><li><strong>第三方服务</strong> - 已在初始设计中涵盖。</li><li><strong>iOS、Android、SMS、Email</strong> - 已在初始设计中涵盖。</li></ul><p>发送电子邮件的 API 调用示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
   &quot;to&quot;:[
      {
         &quot;user_id&quot;:123456
      }
   ],
   &quot;from&quot;:{
      &quot;email&quot;:&quot;from_address@example.com&quot;
   },
   &quot;subject&quot;:&quot;Hello World!&quot;,
   &quot;content&quot;:[
      {
         &quot;type&quot;:&quot;text/plain&quot;,
         &quot;value&quot;:&quot;Hello, World!&quot;
      }
   ]
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通知的生命周期示例：</p><ul><li>服务发起通知请求</li><li>通知服务从数据库/缓存中获取元数据（用户信息、设置等）</li><li>通知事件被发送到相应的队列中，供每个第三方提供商处理。</li><li>工作进程从消息队列中提取通知并发送给第三方服务。</li><li>第三方服务将通知传递给最终用户。</li></ul><h2 id="第三步-深入设计" tabindex="-1"><a class="header-anchor" href="#第三步-深入设计" aria-hidden="true">#</a> 第三步：深入设计</h2><p>在这一部分，我们将讨论改进设计中的一些附加考虑因素。</p><h3 id="可靠性" tabindex="-1"><a class="header-anchor" href="#可靠性" aria-hidden="true">#</a> 可靠性</h3><p>为了保证系统的可靠性，需要考虑以下问题：</p><ul><li>数据丢失时会发生什么？</li><li>收件人是否会收到通知且每次仅收到一次？</li></ul><p>为了避免数据丢失，我们可以将通知存储在工作进程的通知日志数据库中，并在通知未发送成功时进行重试：</p><figure><img src="`+h+`" alt="notification-log-db" tabindex="0" loading="lazy"><figcaption>notification-log-db</figcaption></figure><p>那么，如何处理重复通知？</p><p>由于无法保证通知的“精确一次”投递（除非第三方 API 提供幂等性键），偶尔会发生重复通知。如果第三方 API 不提供幂等性，仍可以通过在端实现去重机制来降低重复通知的概率，若通知事件 ID 已出现，则丢弃该事件。</p><h3 id="通知模板" tabindex="-1"><a class="header-anchor" href="#通知模板" aria-hidden="true">#</a> 通知模板</h3><p>为了避免客户端每次都重新构建通知，我们将引入通知模板，因为许多通知可以复用相同的模板：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>TITLE:
您的订单已签收

BODY:
您购买的[ITEM NAME]已经被签收，运单编号[ITEM TRACKING NUMBER]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通知设置" tabindex="-1"><a class="header-anchor" href="#通知设置" aria-hidden="true">#</a> 通知设置</h3><p>在发送任何通知之前，我们首先通过以下数据库表检查用户是否已选择接收指定通信渠道的通知：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>user_id bigInt
channel varchar # 推送通知、电子邮件或短信
opt_in boolean # 用户是否选择接收通知
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="限流" tabindex="-1"><a class="header-anchor" href="#限流" aria-hidden="true">#</a> 限流</h3><p>为了避免过多通知让用户不堪重负，我们可以在客户端引入一些限流措施（由我们端实现），这样用户不会因为收到大量通知而立即选择取消订阅。</p><h3 id="重试机制" tabindex="-1"><a class="header-anchor" href="#重试机制" aria-hidden="true">#</a> 重试机制</h3><p>如果第三方提供者无法发送通知，通知将被放入重试队列。如果问题持续存在，则通知开发人员。</p><h3 id="推送通知的安全性" tabindex="-1"><a class="header-anchor" href="#推送通知的安全性" aria-hidden="true">#</a> 推送通知的安全性</h3><p>只有经过验证和认证的客户端才能通过我们的 API 发送推送通知。通过要求使用 <code>appKey</code> 和 <code>appSecret</code> 来实现这一点，灵感来源于 <code>Android/Apple</code> 的通知服务器。</p><h3 id="监控队列中的通知" tabindex="-1"><a class="header-anchor" href="#监控队列中的通知" aria-hidden="true">#</a> 监控队列中的通知</h3><p>一个关键的监控指标是队列中通知的数量。如果队列过大，我们可能需要增加更多的工作进程：</p><figure><img src="`+p+'" alt="notifications-queue" tabindex="0" loading="lazy"><figcaption>notifications-queue</figcaption></figure><h3 id="事件追踪" tabindex="-1"><a class="header-anchor" href="#事件追踪" aria-hidden="true">#</a> 事件追踪</h3><p>我们可能需要追踪与通知相关的某些事件，例如打开率、点击率等。</p><p>通常，通过集成分析服务来完成这一点，因此我们需要将通知系统与某个分析服务进行集成。</p><figure><img src="'+m+'" alt="notification-events" tabindex="0" loading="lazy"><figcaption>notification-events</figcaption></figure><h3 id="更新后的设计" tabindex="-1"><a class="header-anchor" href="#更新后的设计" aria-hidden="true">#</a> 更新后的设计</h3><p>将所有内容汇总在一起，这是我们的最终设计：</p><figure><img src="'+f+'" alt="final-design" tabindex="0" loading="lazy"><figcaption>final-design</figcaption></figure><p>新增的其他功能：</p><ul><li>通知服务器配备了身份验证和限流功能。</li><li>增加了重试机制来处理通知失败。</li><li>增加了通知模板，以提供一致的通知体验。</li><li>增加了监控和追踪系统，以便跟踪系统健康状况，并为未来的改进提供支持。</li></ul><h2 id="第四步-总结" tabindex="-1"><a class="header-anchor" href="#第四步-总结" aria-hidden="true">#</a> 第四步：总结</h2><p>我们构建了一个支持多渠道的通知系统，采用了消息队列实现解耦，增强了系统的可扩展性与可靠性。</p><p>我们还深入研究了一些组件和优化：</p><ul><li><strong>可靠性</strong>：添加了重试机制处理失败。</li><li><strong>安全性</strong>：通过 <code>AppKey</code> 和 <code>AppSecret</code> 确保仅认证客户端可发送通知。</li><li><strong>用户友好</strong>：支持退订与限流，用户可以选择不接收通知，服务在发送通知之前会先检查用户设置。</li><li><strong>监控和优化</strong>：加入分析与监控，跟踪系统健康状态。</li></ul>',81),x=[b];function _(q,y){return e(),n("div",null,x)}const z=i(v,[["render",_],["__file","30_design_a_notification_system.html.vue"]]);export{z as default};
