import{_ as l,o as i,c as r,a as n}from"./app-sFySMTnI.js";const o={},t=n('<h1 id="_18-cap-定理" tabindex="-1"><a class="header-anchor" href="#_18-cap-定理" aria-hidden="true">#</a> 18. CAP 定理</h1><p>CAP 定理（CAP theorem），又被称作布鲁尔定理（Brewer&#39;s theorem），由计算机科学家 Eric Brewer 于 2000 年提出，是分布式系统设计的一个重要理论框架。</p><p>CAP 代表了 <strong>Consistency (一致性)</strong>、<strong>Availability (可用性)</strong> 和 <strong>Partition Tolerance (分区容错性)</strong>。</p><p>CAP 定理表明，对于一个分布式计算系统来说，不可能同时满足这三个属性，必须在其中进行权衡。</p><h2 id="cap-的三个组成部分" tabindex="-1"><a class="header-anchor" href="#cap-的三个组成部分" aria-hidden="true">#</a> CAP 的三个组成部分</h2><ol><li><p><strong>Consistency (一致性)</strong>:</p><ul><li>系统中的所有节点在同一时间看到的数据必须一致。</li><li>举例：在一个银行应用中，无论用户访问哪个节点，账户余额应该是相同的。</li></ul></li><li><p><strong>Availability (可用性)</strong>:</p><ul><li>每个请求都能在有限的时间内得到响应，无论结果是否一致。</li><li>举例：即使某些节点无法同步最新数据，系统仍然能够返回一个结果，避免服务不可用。</li></ul></li><li><p><strong>Partition Tolerance (分区容错性)</strong>:</p><ul><li>系统在出现网络分区时仍然能够继续运行。网络分区是分布式系统中的常见问题，比如节点之间通信失败或延迟过高。</li><li>举例：当节点 A 和节点 B 之间的通信断开时，系统应能够继续服务，不至于完全崩溃。</li></ul></li></ol><h2 id="cap-定理的核心-两难选择" tabindex="-1"><a class="header-anchor" href="#cap-定理的核心-两难选择" aria-hidden="true">#</a> CAP 定理的核心：两难选择</h2><p>CAP 定理指出，当网络分区（P）发生时，分布式系统必须在一致性（C）和可用性（A）之间做出选择：</p><ol><li><p><strong>Consistency + Partition Tolerance (CP)</strong>:</p><ul><li>优先保证一致性，牺牲一定的可用性。</li><li>示例：分布式数据库 MongoDB 中的强一致性模式。</li><li>场景：金融交易系统，数据一致性要求高。</li></ul></li><li><p><strong>Availability + Partition Tolerance (AP)</strong>:</p><ul><li>优先保证可用性，允许数据短时间内不一致。</li><li>示例：DNS 系统，在网络分区时仍然响应用户请求，但可能返回旧数据。</li><li>场景：社交媒体、缓存系统。</li></ul></li></ol><h2 id="pacelc-cap-定理的延伸" tabindex="-1"><a class="header-anchor" href="#pacelc-cap-定理的延伸" aria-hidden="true">#</a> PACELC：CAP 定理的延伸</h2><p>CAP 定理关注网络分区的场景，而 PACELC 模型进一步补充了非分区情况下的权衡：</p><p><strong>PACELC</strong>: Given <strong>P</strong>, choose <strong>A</strong> or <strong>C</strong>. <strong>E</strong>lse, favor <strong>L</strong>atency or <strong>C</strong>onsistency.</p><ul><li>如果出现网络分区(Partition), 系统必须在一致性 (Consistency) 和可用性 (Availability) 之间选择；</li><li>否则(Else), 在延迟 (Latency) 和一致性 (Consistency) 之间权衡。</li></ul><h3 id="pacelc-的应用" tabindex="-1"><a class="header-anchor" href="#pacelc-的应用" aria-hidden="true">#</a> PACELC 的应用</h3><ol><li><p><strong>Amazon DynamoDB</strong>:</p><ul><li>分区情况下选择可用性 (AP)。</li><li>非分区情况下选择低延迟 (EL)。</li></ul></li><li><p><strong>Google Spanner</strong>:</p><ul><li>分区情况下选择一致性 (CP)。</li><li>非分区情况下选择一致性 (EC)。</li></ul></li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>CAP 定理和 PACELC 模型帮助设计分布式系统时回答以下关键问题：</p><ol><li><strong>是否优先数据一致性？</strong><ul><li>如果数据必须始终一致，应选择 CP 系统，如金融、订单管理。</li></ul></li><li><strong>是否优先可用性？</strong><ul><li>如果系统需要保证高可用性，应选择 AP 系统，如社交平台、缓存。</li></ul></li><li><strong>非分区情况下优先一致性还是低延迟？</strong><ul><li>例如，全球范围的数据库系统可能选择牺牲低延迟以实现数据一致性。</li></ul></li></ol>',18),a=[t];function e(s,c){return i(),r("div",null,a)}const h=l(o,[["render",e],["__file","17_cap_theorem.html.vue"]]);export{h as default};
