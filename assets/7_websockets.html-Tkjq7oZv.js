import{_ as t,r as o,o as c,c as i,b as n,d as e,e as a,a as l}from"./app-UUuqQ2DY.js";const r={},p=l(`<h1 id="_8-websocket" tabindex="-1"><a class="header-anchor" href="#_8-websocket" aria-hidden="true">#</a> 8. WebSocket</h1><p>在 web 开发的世界里，超文本传输协议（HTTP）一直是客户端与服务器之间通信的基石。然而，随着 Web 应用的发展，HTTP 的局限性变得越来越明显，尤其是在需要实时通信的场景中。本文将探讨这些局限性，并介绍 WebSocket，这一旨在解决 HTTP 缺陷的协议。</p><h2 id="http-的局限性" tabindex="-1"><a class="header-anchor" href="#http-的局限性" aria-hidden="true">#</a> HTTP 的局限性</h2><p>HTTP 是一种无状态协议，主要用于传输超媒体文档，如 HTML。它基于请求-响应周期工作，即客户端向服务器发送请求，服务器返回请求的数据。虽然这种方式适用于大多数 Web 应用，但在需要持续、实时通信的场景中，如即时聊天应用，它的表现就显得不足了。</p><p><strong>HTTP 的主要局限性：</strong></p><ul><li><strong>无状态性：</strong> 每个 HTTP 请求都是独立的，意味着服务器不会在请求之间保留信息。这使得持续通信变得非常困难。</li><li><strong>轮询：</strong> 为了模拟实时通信，HTTP 需要频繁的轮询，即客户端反复发送请求以检查是否有新数据。这种做法效率低下，并可能导致不必要的网络流量。</li><li><strong>延迟：</strong> 轮询间隔可能导致接收新数据时出现延迟，这在实时应用中是不可接受的。</li></ul><h2 id="websocket-实时通信的解决方案" tabindex="-1"><a class="header-anchor" href="#websocket-实时通信的解决方案" aria-hidden="true">#</a> WebSocket：实时通信的解决方案</h2><p>WebSocket 是建立在 <strong>互联网协议（IP）</strong> 和 <strong>传输控制协议（TCP）</strong> 之上的一种协议，提供全双工通信通道，通过一个单一的、长久保持的连接，允许数据双向流动。与 HTTP 不同，WebSocket 允许数据在两个方向上自由流动，而不需要客户端反复发送请求。</p><p><strong>WebSocket 的主要特点：</strong></p><ul><li><strong>持久连接：</strong> 在初始握手完成后，WebSocket 连接保持打开状态，实现客户端与服务器之间的持续数据交换。</li><li><strong>双向通信：</strong> 数据可以同时发送和接收，这使得 WebSocket 非常适合实时应用，如聊天系统和实时动态信息流。</li><li><strong>低延迟：</strong> 由于连接是持久的，因此数据传输的延迟非常小，确保实时更新。</li></ul><h2 id="使用案例" tabindex="-1"><a class="header-anchor" href="#使用案例" aria-hidden="true">#</a> 使用案例</h2><p>为了理解 WebSocket 的优势，我们以聊天应用为例。在典型的基于 HTTP 的设置中，客户端需要定期向服务器轮询，以检查是否有新消息。这种做法不仅增加了延迟，还因为不断开关连接而消耗更多资源。</p><p>使用 WebSocket 后，流程变得更加简化：</p><ol><li><strong>WebSocket 握手：</strong> 客户端发起 HTTP 请求，建立 WebSocket 连接。如果成功，服务器响应状态码 <code>101 Switching Protocols</code>，将连接升级为 WebSocket。</li><li><strong>持久连接：</strong> 一旦建立，WebSocket 连接将保持打开，允许服务器实时推送新消息到客户端。</li><li><strong>实时通信：</strong> 客户端与服务器可以持续交换消息，无需反复建立连接。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># WebSocket 连接示例（Python）</span>
<span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> websockets

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">chat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    uri <span class="token operator">=</span> <span class="token string">&quot;ws://localhost:8000&quot;</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> websockets<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>uri<span class="token punctuation">)</span> <span class="token keyword">as</span> websocket<span class="token punctuation">:</span>
        <span class="token comment"># 发送消息</span>
        <span class="token keyword">await</span> websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&quot;Hello, Server!&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># 接收响应</span>
        response <span class="token operator">=</span> <span class="token keyword">await</span> websocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Received: </span><span class="token interpolation"><span class="token punctuation">{</span>response<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>chat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="websocket-握手和通信流图示" tabindex="-1"><a class="header-anchor" href="#websocket-握手和通信流图示" aria-hidden="true">#</a> WebSocket 握手和通信流图示</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>+--------+       HTTP 请求       +--------+
|  客户端 | -------------------&gt; | 服务器  |
+--------+                      +--------+
    |                                |
    |       HTTP 101 切换协议         |
    | &lt;----------------------------- |
    |                                |
    |       WebSocket 连接建立        |
    | &lt;----------------------------&gt; |
    |           双向数据流             |
    |                                |
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关链接" tabindex="-1"><a class="header-anchor" href="#相关链接" aria-hidden="true">#</a> 相关链接</h2>`,18),d={href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API",target:"_blank",rel:"noopener noreferrer"},u={href:"https://tools.ietf.org/html/rfc6455",target:"_blank",rel:"noopener noreferrer"};function k(b,v){const s=o("ExternalLinkIcon");return c(),i("div",null,[p,n("ul",null,[n("li",null,[n("a",d,[e("MDN Web Docs 关于 WebSocket"),a(s)])]),n("li",null,[n("a",u,[e("WebSocket 协议规范"),a(s)])])])])}const m=t(r,[["render",k],["__file","7_websockets.html.vue"]]);export{m as default};
