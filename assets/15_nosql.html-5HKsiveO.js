import{_ as s,o as n,c as t,a}from"./app-LUplh_D-.js";const o={},e=a(`<h1 id="_16-nosql" tabindex="-1"><a class="header-anchor" href="#_16-nosql" aria-hidden="true">#</a> 16. NoSQL</h1><p>NoSQL 是 “Not Only SQL” 的缩写，指的是非关系型数据库。与传统的 SQL（关系型数据库 RDBMS）不同，NoSQL 数据库没有标准的查询语言和固定的表结构，主要用于解决传统关系型数据库在某些特定场景下的局限性，尤其是在可扩展性和性能方面，适用于非结构化或半结构化数据的存储和操作。</p><h2 id="nosql-和-sql-的对比" tabindex="-1"><a class="header-anchor" href="#nosql-和-sql-的对比" aria-hidden="true">#</a> NoSQL 和 SQL 的对比</h2><table><thead><tr><th>特性</th><th>SQL 数据库</th><th>NoSQL 数据库</th></tr></thead><tbody><tr><td><strong>结构</strong></td><td>固定的表结构 (Schema)</td><td>动态或无固定 Schema</td></tr><tr><td><strong>数据结构</strong></td><td>表（Rows &amp; Columns）</td><td>样化（Key-Value, 文档, 图等）</td></tr><tr><td><strong>查询语言</strong></td><td>使用 SQL 标准查询语言</td><td>没有统一的查询语言</td></tr><tr><td><strong>扩展性</strong></td><td>垂直扩展 (增加硬件资源)</td><td>水平扩展 (增加服务器节点)</td></tr><tr><td><strong>一致性模型</strong></td><td>强一致性 (ACID)</td><td>最终一致性 (BASE)</td></tr><tr><td><strong>适用场景</strong></td><td>事务性强、数据模型固定</td><td>海量数据、高并发、灵活数据结构</td></tr></tbody></table><p>SQL 强调数据一致性和结构化，而 NoSQL 则优先考虑扩展性和灵活性。NoSQL 并不是要取代 SQL，而是针对特定需求提供补充，两者的选择通常取决于具体的需求和应用场景。</p><h2 id="nosql-的动机-扩展性-scale" tabindex="-1"><a class="header-anchor" href="#nosql-的动机-扩展性-scale" aria-hidden="true">#</a> NoSQL 的动机：扩展性（Scale）</h2><p>在现代分布式系统中，尤其是互联网规模的应用，传统的关系型数据库 RDBMS 面临以下挑战：</p><ol><li><strong>扩展性不足</strong>: SQL 数据库因为 ACID 特性限制，很难在集群中实现水平扩展。</li><li><strong>高并发需求</strong>: 随着用户量和数据量的爆炸式增长，单点数据库性能无法满足需求。</li><li><strong>灵活性不足</strong>: 固定的 Schema 难以应对频繁变化或不确定的业务需求。</li></ol><p>NoSQL 通过牺牲部分一致性，提高扩展性（Scale）和性能，是为了解决这些问题而生的。</p><h3 id="垂直扩展-vs-水平扩展" tabindex="-1"><a class="header-anchor" href="#垂直扩展-vs-水平扩展" aria-hidden="true">#</a> 垂直扩展 vs 水平扩展</h3><ul><li>垂直扩展（Vertical Scaling）：增加单节点的硬件资源（如内存和 CPU），缺点是成本高，性能提升有限。</li><li>水平扩展（Horizontal Scaling）：增加更多服务器组成集群，分散数据存储和计算压力。优点是更高的扩展性、更低的成本，随之而来的挑战是数据分片 (Sharding) 和分布式一致性。</li></ul><h3 id="分片-sharding" tabindex="-1"><a class="header-anchor" href="#分片-sharding" aria-hidden="true">#</a> 分片 (Sharding)</h3><p>分片是 NoSQL 数据库实现水平扩展的核心技术。</p><ul><li>将数据分成多个部分，每个分片存储在不同的节点上。</li><li>通过哈希、范围等方式决定数据存储位置。</li></ul><p><strong>示例</strong>:</p><ul><li>用户 ID <code>1-1000</code> 存储在节点 A。</li><li>用户 ID <code>1001-2000</code> 存储在节点 B。</li></ul><p>下一节我们将详细讲解分片的原理。</p><h3 id="最终一致性-eventual-consistency" tabindex="-1"><a class="header-anchor" href="#最终一致性-eventual-consistency" aria-hidden="true">#</a> 最终一致性 (Eventual Consistency)</h3><p>为了实现高性能和扩展性，NoSQL 通常不遵守严格的 ACID 原则，而采用 BASE 模型：</p><ul><li><strong>基本可用 (Basically Available)</strong>: 系统总是可以响应请求，但可能返回旧数据。</li><li><strong>软状态 (Soft State)</strong>: 数据状态可能处于不一致。</li><li><strong>最终一致性 (Eventual Consistency)</strong>: 数据最终达到一致。</li></ul><p><strong>示例场景</strong>:</p><ul><li>数据写入主节点（Leader），异步更新到从节点（Followers）。</li><li>用户短时间内访问从库，可能读取到旧数据。</li><li>允许短时间内不同节点的数据状态不一致，以换取更高的性能和扩展性。</li></ul><h2 id="nosql-的四种主要类型" tabindex="-1"><a class="header-anchor" href="#nosql-的四种主要类型" aria-hidden="true">#</a> NoSQL 的四种主要类型</h2><ol><li><p><strong>键值存储 (Key-Value Store)</strong></p><ul><li><strong>数据结构</strong>: 简单的键值对（Key-Value），值是平面的。</li><li><strong>优势</strong>: 最简单的 NoSQL 模型，高性能，通常用于缓存、高速查找场景。</li><li><strong>示例</strong>: Redis、Memcached、etcd。</li><li><strong>适用场景</strong>: 存储会话信息、购物车数据、配置文件等，通常是将 SQL 数据库作为主存储，用键值数据库做缓存层。</li></ul><p><strong>示例</strong>:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;user123&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span>
<span class="token property">&quot;user124&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Bob&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><ol start="2"><li><p><strong>文档存储 (Document Store)</strong></p><ul><li><strong>数据结构</strong>: 数据以 JSON 或类似格式存储，支持嵌套的键值对。</li><li><strong>优势</strong>: 无 Schema 设计，灵活性强，支持大规模数据存储，适合处理半结构化数据。</li><li><strong>示例</strong>: MongoDB、CouchDB。</li><li><strong>适用场景</strong>: 动态数据结构、大规模存储和查询，如内容管理系统（CMS）、实时分析、产品目录等。</li></ul><p><strong>示例</strong>:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;orders&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token punctuation">{</span> <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token property">&quot;item&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Laptop&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span> <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token property">&quot;item&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Phone&quot;</span> <span class="token punctuation">}</span>
	<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><ol start="3"><li><p><strong>宽列存储 (Wide-Column Store)</strong></p><ul><li><strong>数据结构</strong>: 基于表格存储，但行和列的 Schema 非固定。</li><li><strong>优势</strong>: 支持海量数据，擅长快速写入。</li><li><strong>示例</strong>: Cassandra、Google BigTable。</li><li><strong>适用场景</strong>: 大规模写操作为主，读操作较少，如时序数据、日志系统。</li></ul><p><strong>示例</strong>:</p><table><thead><tr><th>Key</th><th>ColumnFamily:User</th></tr></thead><tbody><tr><td>user123</td><td>name: Alice, email: alice@mail</td></tr><tr><td>user124</td><td>name: Bob, email: bob@mail</td></tr></tbody></table></li></ol><hr><ol start="4"><li><p><strong>图数据库 (Graph Database)</strong></p><ul><li><strong>数据结构</strong>: 以节点和边的形式建模。</li><li><strong>优势</strong>: 专注于存储和操作关系型数据。</li><li><strong>示例</strong>: Neo4j、JanusGraph。</li><li><strong>适用场景</strong>: 社交网络关注与粉丝关系、推荐系统、社交图谱关系分析。</li></ul><p><strong>示例</strong>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Alice -- Knows --&gt; Bob
Alice -- Likes --&gt; Music
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,30),l=[e];function r(i,p){return n(),t("div",null,l)}const c=s(o,[["render",r],["__file","15_nosql.html.vue"]]);export{c as default};
