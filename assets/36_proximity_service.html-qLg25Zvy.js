import{_ as e,o as i,c as s,a}from"./app-es50OF96.js";const n="/assets/system-design-175-QQHpFxss.png",d="/assets/system-design-176-dzvKzKg1.png",t="/assets/system-design-177-5bltUbSI.png",l="/assets/system-design-178-wu-V8c5G.png",r="/assets/system-design-179-g-UceKzx.png",o="/assets/system-design-180-_0caJERw.png",h="/assets/system-design-181-BE38A4-y.png",g="/assets/system-design-182-P3wduhgZ.png",c="/assets/system-design-183--_xOZ_I3.png",p="/assets/system-design-184-rGDPqMC7.png",u="/assets/system-design-185-clYjb8NV.png",m="/assets/system-design-186-Ns-aCE91.png",b="/assets/system-design-187-r3CyRETY.png",f="/assets/system-design-188-aJjP2Qnk.png",v="/assets/system-design-193-Km11ePrD.png",x="/assets/system-design-194-0W0L4MO8.png",_="/assets/system-design-195-kXBe5AKZ.png",y={},G=a(`<h1 id="_16-设计附近服务" tabindex="-1"><a class="header-anchor" href="#_16-设计附近服务" aria-hidden="true">#</a> 16. 设计附近服务</h1><p>附近服务使您能够发现附近的地点，如餐馆、酒店、剧院等。</p><h2 id="第一步-理解问题并确定设计范围" tabindex="-1"><a class="header-anchor" href="#第一步-理解问题并确定设计范围" aria-hidden="true">#</a> 第一步：理解问题并确定设计范围</h2><p>以下是一些理解问题的示例问题：</p><ul><li><strong>候选人</strong>: 用户可以指定搜索半径吗？如果在搜索区域内没有足够的商户怎么办？</li><li><strong>面试官</strong>: 我们只关心某个特定区域内的商户。如果时间允许，我们可以讨论增强功能。</li><li><strong>候选人</strong>: 最大半径是多少？我可以假设是 20 公里吗？</li><li><strong>面试官</strong>: 是的，这是一个合理的假设。</li><li><strong>候选人</strong>: 用户可以通过 UI 更改搜索半径吗？</li><li><strong>面试官</strong>: 是的，假设我们提供以下选项：0.5 公里、1 公里、2 公里、5 公里、20 公里。</li><li><strong>候选人</strong>: 商户信息如何修改？我们需要实时反映这些变化吗？</li><li><strong>面试官</strong>: 商户老板可以添加/删除/更新商户。假设变更将在第二天传播。</li><li><strong>候选人</strong>: 当用户移动时，我们如何处理搜索结果？</li><li><strong>面试官</strong>: 假设我们不需要不断更新页面，因为用户的移动速度较慢。</li></ul><h3 id="功能要求" tabindex="-1"><a class="header-anchor" href="#功能要求" aria-hidden="true">#</a> 功能要求</h3><ul><li>基于用户位置返回所有商户</li><li>商户老板可以添加/删除/更新商户，信息不会实时反映。</li><li>顾客可以查看商户的详细信息。</li></ul><h3 id="非功能性要求" tabindex="-1"><a class="header-anchor" href="#非功能性要求" aria-hidden="true">#</a> 非功能性要求</h3><ul><li>低延迟 - 用户应能快速看到附近的商户</li><li>数据隐私 - 位置数据属于敏感信息，我们应考虑如何遵守相关法规</li><li>高可用性和可扩展性要求 - 我们应确保系统能够处理高峰时段密集地区的流量激增</li></ul><h3 id="粗略计算" tabindex="-1"><a class="header-anchor" href="#粗略计算" aria-hidden="true">#</a> 粗略计算</h3><ul><li>假设每天有 1 亿活跃用户和 2 亿商户</li><li>搜索 QPS = 1 亿 * 5（每天的平均搜索次数）/ 10^5（一天的秒数）= 5000</li></ul><h2 id="第二步-提出高层设计并获得批准" tabindex="-1"><a class="header-anchor" href="#第二步-提出高层设计并获得批准" aria-hidden="true">#</a> 第二步：提出高层设计并获得批准</h2><h3 id="api-设计" tabindex="-1"><a class="header-anchor" href="#api-设计" aria-hidden="true">#</a> API 设计</h3><p>我们将采用 RESTful API 规范来设计简化版的 API。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /v1/search/nearby
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此端点根据搜索条件返回商户，支持分页。</p><p>请求参数 - 纬度、经度、半径</p><p>示例响应：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
  &quot;total&quot;: 10,
  &quot;businesses&quot;:[{商户对象}]
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此端点返回渲染搜索结果页面所需的所有内容，但用户可能需要更多关于特定商户的详细信息，可以通过其他端点获取。</p><p>以下是我们需要的一些其他商户 API：</p><ul><li><code>GET /v1/businesses/{:id}</code>- 返回商户详细信息</li><li><code>POST /v1/businesses</code>- 创建新商户</li><li><code>PUT /v1/businesses/{:id}</code>- 更新商户详细信息</li><li><code>DELETE /v1/businesses/{:id}</code>- 删除商户</li></ul><h3 id="数据模型" tabindex="-1"><a class="header-anchor" href="#数据模型" aria-hidden="true">#</a> 数据模型</h3><p>在这个问题中，读取量很高，因为这些功能通常会被频繁使用：</p><ul><li>搜索附近的商户</li><li>查看商户的详细信息</li></ul><p>另一方面，写入量较低，因为我们很少更改商户信息。因此，对于读多写少的工作流，关系型数据库如 MySQL 是理想的选择。</p><p>在模式方面，我们需要一个主<code>business</code>表来存储商户信息：</p><figure><img src="`+n+'" alt="business-table" tabindex="0" loading="lazy"><figcaption>business-table</figcaption></figure><p>我们还需要一个地理索引表，以便高效处理空间操作。稍后我们将在介绍地理哈希的概念时讨论该表。</p><h3 id="高层设计" tabindex="-1"><a class="header-anchor" href="#高层设计" aria-hidden="true">#</a> 高层设计</h3><p>以下是系统的高层概述：</p><figure><img src="'+d+'" alt="high-level-design" tabindex="0" loading="lazy"><figcaption>high-level-design</figcaption></figure><ul><li>负载均衡器自动将流量分配到多个服务。公司通常提供一个单一的 DNS 入口，内部根据 URL 路径将 API 调用路由到相应的服务。</li><li>基于位置的服务（LBS）- 读密集型、无状态服务，负责处理附近商户的读请求</li><li>商户服务 - 支持商户的 CRUD 操作</li><li>数据库集群 - 存储商户信息并进行复制以扩展读取。这样可能导致 LBS 读取商户信息时出现一些不一致，但在我们的用例中这不是问题。</li><li>商户服务和 LBS 的可扩展性 - 由于这两个服务是无状态的，我们可以轻松地水平扩展它们</li></ul><h3 id="获取附近商户的算法" tabindex="-1"><a class="header-anchor" href="#获取附近商户的算法" aria-hidden="true">#</a> 获取附近商户的算法</h3><p>在实际应用中，可以使用地理空间数据库，如 Redis 中的 Geohash 或带有 PostGIS 扩展的 Postgres。</p><p>让我们探讨一下这些数据库如何工作，以及对于此类问题还存在哪些替代算法。</p><h3 id="二维搜索" tabindex="-1"><a class="header-anchor" href="#二维搜索" aria-hidden="true">#</a> 二维搜索</h3><p>解决此问题的最直观和朴素的方法是围绕某人画一个圆圈，并获取圆圈半径内的所有商户：</p><figure><img src="'+t+`" alt="2d-search" tabindex="0" loading="lazy"><figcaption>2d-search</figcaption></figure><p>这可以很容易地转化为一个 SQL 查询：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT business_id, latitude, longitude
FROM business
WHERE (latitude BETWEEN {:my_lat} - radius AND {:my_lat} + radius) AND
      (longitude BETWEEN {:my_long} - radius AND {:my_long} + radius)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此查询效率不高，因为我们需要查询整个表。另一种选择是在经度和纬度列上建立索引，但这不会大幅提高性能。</p><p>这是因为无论我们是否按经度或纬度索引，仍然需要后续筛选大量数据：</p><figure><img src="`+l+'" alt="2d-query-problem" tabindex="0" loading="lazy"><figcaption>2d-query-problem</figcaption></figure><p>然而，我们可以建立二维索引，并且有不同的方法来实现这一点：</p><figure><img src="'+r+'" alt="2d-index-options" tabindex="0" loading="lazy"><figcaption>2d-index-options</figcaption></figure><p>我们将讨论紫色高亮的几个方法——地理哈希、四叉树和 Google S2 是最常见的方式。</p><h3 id="均匀划分网格" tabindex="-1"><a class="header-anchor" href="#均匀划分网格" aria-hidden="true">#</a> 均匀划分网格</h3><p>另一种选择是将世界划分为小网格：</p><figure><img src="'+o+'" alt="evenly-divided-grid" tabindex="0" loading="lazy"><figcaption>evenly-divided-grid</figcaption></figure><p>这种方法的主要缺陷是商户分布不均，因为许多商户集中在纽约，而撒哈拉沙漠几乎没有商户。</p><h3 id="geohash-地理哈希" tabindex="-1"><a class="header-anchor" href="#geohash-地理哈希" aria-hidden="true">#</a> Geohash（地理哈希）</h3><p>Geohash 类似于前面的方法，但它将世界递归地划分为越来越小的网格，每两个比特对应一个单独的象限：</p><figure><img src="'+h+`" alt="geohash-example" tabindex="0" loading="lazy"><figcaption>geohash-example</figcaption></figure><p>Geohash 通常以 base32 表示。以下是 Google 总部的 Geohash 示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1001 10110 01001 10000 11011 11010 (二进制base32) → 9q9hvu (base32)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它支持 12 级精度，但对于我们的用例，我们只需要 6 级精度：</p><figure><img src="`+g+'" alt="geohash-precision" tabindex="0" loading="lazy"><figcaption>geohash-precision</figcaption></figure><p>Geohash 使我们能够通过 Geohash 的子字符串快速定位邻近区域：</p><figure><img src="'+c+'" alt="geohash-substring" tabindex="0" loading="lazy"><figcaption>geohash-substring</figcaption></figure><p>然而，Geohash 的一个问题是，某些非常接近的地方可能没有共享前缀，因为它们位于赤道或经线的不同两侧：</p><figure><img src="'+p+'" alt="boundary-issue-geohash" tabindex="0" loading="lazy"><figcaption>boundary-issue-geohash</figcaption></figure><p>另一个问题是，两个非常接近的商户可能没有共享前缀，因为它们位于不同的象限：</p><figure><img src="'+u+'" alt="geohash-boundary-issue-2" tabindex="0" loading="lazy"><figcaption>geohash-boundary-issue-2</figcaption></figure><p>通过获取相邻的 Geohash 而不仅仅是用户的 Geohash，可以缓解这个问题。</p><p>使用 Geohash 的一个好处是我们可以用它来轻松实现当查询中获取的商户不足时增加搜索半径的额外功能：</p><figure><img src="'+m+'" alt="geohash-expansion" tabindex="0" loading="lazy"><figcaption>geohash-expansion</figcaption></figure><p>可以通过删除目标 Geohash 的最后一个字母来增加半径。</p><h3 id="四叉树" tabindex="-1"><a class="header-anchor" href="#四叉树" aria-hidden="true">#</a> 四叉树</h3><p>四叉树是一种数据结构，根据业务需求递归地细分象限，直到达到需要的深度：</p><figure><img src="'+b+'" alt="quadtree-example" tabindex="0" loading="lazy"><figcaption>quadtree-example</figcaption></figure><p>这是一个内存中的解决方案，无法轻易地在数据库中实现。</p><p>它的概念结构如下：</p><figure><img src="'+f+`" alt="quadtree-concept" tabindex="0" loading="lazy"><figcaption>quadtree-concept</figcaption></figure><p>构建四叉树的伪代码示例如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public void buildQuadtree(TreeNode node) {
    if (countNumberOfBusinessesInCurrentGrid(node) &gt; 100) {
        node.subdivide();
        for (TreeNode child : node.getChildren()) {
            buildQuadtree(child);
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在叶节点中，我们存储：</p><ul><li>用于标识象限尺寸的左上角和右下角坐标</li><li>该网格中的商户 ID 列表</li></ul><p>在内部节点中，我们存储：</p><ul><li>象限的左上角和右下角坐标</li><li>4 个指向子节点的指针</li></ul><p>根据书中的计算，表示四叉树所需的总内存约为 1.7GB，假设我们处理 2 亿个商户。</p><p>因此，四叉树可以存储在单个服务器的内存中，尽管我们当然可以复制它以实现冗余和负载均衡。</p><p>如果采用这种方法，需要考虑的一个问题是服务器启动时间可能需要几分钟，直到四叉树构建完成</p><p>。</p><h3 id="s2-geometry" tabindex="-1"><a class="header-anchor" href="#s2-geometry" aria-hidden="true">#</a> S2 Geometry</h3><p>Google S2 是另一种用来处理此类问题的库，具有很好的性能和高精度。我们可以通过 Google S2 库将地球分成固定数量的区域，从而快速查找附近的商户。</p><h2 id="第三步-设计深入分析" tabindex="-1"><a class="header-anchor" href="#第三步-设计深入分析" aria-hidden="true">#</a> 第三步：设计深入分析</h2><p>让我们深入探讨设计中的一些关键领域。</p><h3 id="数据库扩展" tabindex="-1"><a class="header-anchor" href="#数据库扩展" aria-hidden="true">#</a> 数据库扩展</h3><p>如果商户表无法容纳在单个服务器实例中，可以通过分片来扩展商户表。</p><p>GeoHash 表可以通过两列来表示：</p><figure><img src="`+v+`" alt="geohash-table-example" tabindex="0" loading="lazy"><figcaption>geohash-table-example</figcaption></figure><p>由于数据量不大，我们无需对 GeoHash 表进行分片。我们已经计算过，构建一个四叉树大约需要 1.7GB，而 GeoHash 的空间使用量类似。</p><p>但是，我们可以通过复制该表来扩展读取负载。</p><h3 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存" aria-hidden="true">#</a> 缓存</h3><p>在使用缓存之前，我们应该问问自己是否真的有必要。在我们的情况下，工作负载是以读取为主，且数据可以容纳在单个服务器中，因此这种数据非常适合缓存。</p><p>选择缓存键时我们需要小心。位置坐标不是一个好的缓存键，因为它们经常变化并且可能不准确。</p><p>使用 GeoHash 是一个更合适的缓存键。</p><p>以下是我们如何查询某个 GeoHash 中所有商户的示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT business_id FROM geohash_index WHERE geohash LIKE \`{:geohash}%\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下是将数据缓存到 Redis 的示例代码：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public List&lt;String&gt; getNearbyBusinessIds(String geohash) {
    String cacheKey = hash(geohash);
    List&lt;string&gt; listOfBusinessIds = Redis.get(cacheKey);
    if (listOfBusinessIDs  == null) {
        listOfBusinessIds = Run the select SQL query above;
        Cache.set(cacheKey, listOfBusinessIds, &quot;1d&quot;);
    }
    return listOfBusinessIds;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以缓存所有支持的精度数据，精度并不多，比如 <code>geohash_4, geohash_5, geohash_6</code>。</p><p>正如我们已经讨论过的，存储要求不高，完全可以放入单个 Redis 服务器，但我们也可以为冗余和扩展读取量而进行复制。</p><p>我们甚至可以将多个 Redis 副本部署在不同的数据中心。</p><p>我们还可以缓存 <code>business_id -&gt; business_data</code>，因为用户可能会频繁查询相同热门餐厅的详情。</p><h3 id="区域和可用区" tabindex="-1"><a class="header-anchor" href="#区域和可用区" aria-hidden="true">#</a> 区域和可用区</h3><p>我们可以在全球部署多个 LBS 服务实例，让用户查询离他们最近的实例，从而减少延迟。</p><figure><img src="`+x+'" alt="cross-dc-deployment" tabindex="0" loading="lazy"><figcaption>cross-dc-deployment</figcaption></figure><p>这还使我们能够在全球范围内均匀分配流量。这也可能是为了遵守某些数据隐私法规定所需的。</p><h3 id="后续问题-按类型或时间过滤商户" tabindex="-1"><a class="header-anchor" href="#后续问题-按类型或时间过滤商户" aria-hidden="true">#</a> 后续问题 - 按类型或时间过滤商户</h3><p>一旦商户被过滤，结果集会变得很小，因此可以在内存中进行数据过滤。</p><h3 id="最终设计图" tabindex="-1"><a class="header-anchor" href="#最终设计图" aria-hidden="true">#</a> 最终设计图</h3><figure><img src="'+_+'" alt="final-design" tabindex="0" loading="lazy"><figcaption>final-design</figcaption></figure><ul><li>客户端尝试定位离其位置 500 米以内的餐馆</li><li>负载均衡器将请求转发给 LBS</li><li>LBS 将半径映射到长度为 6 的 GeoHash</li><li>LBS 计算相邻的 GeoHash 并将它们添加到列表中</li><li>对于每个 GeoHash，LBS 调用 Redis 服务器获取相应的商户 ID，可以并行处理。</li><li>最后，LBS 填充商户 ID，过滤结果并返回给用户</li><li>与商户相关的 API 与 LBS 分开，转交给商户服务，商户服务在查询数据库之前会首先检查缓存中的读请求</li><li>商户更新通过定期作业处理，更新 GeoHash 存储</li></ul><h2 id="第四步-总结" tabindex="-1"><a class="header-anchor" href="#第四步-总结" aria-hidden="true">#</a> 第四步：总结</h2><p>我们讨论了一些有趣的主题：</p><ul><li>讨论了几种索引选项 - 2D 搜索、均匀划分网格、GeoHash、四叉树、Google S2</li><li>在深入分析部分讨论了缓存、复制、分片、跨数据中心部署等话题</li></ul>',118),S=[G];function E(B,I){return i(),s("div",null,S)}const z=e(y,[["render",E],["__file","36_proximity_service.html.vue"]]);export{z as default};
