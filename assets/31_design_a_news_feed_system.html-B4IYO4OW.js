import{_ as i,o as e,c as r,a as s}from"./app-es50OF96.js";const n="/assets/system-design-100-Jov1nkvI.png",l="/assets/system-design-101-S2cTIwyq.png",t="/assets/system-design-102-_xLMXb4H.png",a="/assets/system-design-103-xD8pHcLR.png",o="/assets/system-design-104-5h9khKkG.png",d="/assets/system-design-105-fzebmvtP.png",g={},h=s('<h1 id="_11-设计新闻推送系统" tabindex="-1"><a class="header-anchor" href="#_11-设计新闻推送系统" aria-hidden="true">#</a> 11. 设计新闻推送系统</h1><p>新闻推送系统（News Feed）是一个不断更新的首页故事列表，包括状态更新、照片、视频、链接等内容。</p><p>类似的面试题有：<strong>设计 Facebook News Feed、Twitter 时间线、Instagram Feed</strong> 等。</p><h2 id="第一步-理解问题并明确设计范围" tabindex="-1"><a class="header-anchor" href="#第一步-理解问题并明确设计范围" aria-hidden="true">#</a> 第一步：理解问题并明确设计范围</h2><p>在设计之前，与面试官讨论清楚具体的需求至关重要：</p><ul><li><strong>候选人</strong>：这系统是面向移动端，还是 Web 应用？</li><li><strong>面试官</strong>：两者都需要支持。</li><li><strong>候选人</strong>：系统的核心功能是什么？</li><li><strong>面试官</strong>：用户能够发布帖子，并在新闻推送中查看朋友的帖子。</li><li><strong>候选人</strong>：新闻推送是按时间顺序排序，还是基于排名（如优先显示“好友”的帖子）？</li><li><strong>面试官</strong>：为了简化问题，按时间逆序排列即可。</li><li><strong>候选人</strong>：单个用户的好友数量是否有限制？</li><li><strong>面试官</strong>：每个用户最多可以有 5000 个好友。</li><li><strong>候选人</strong>：系统需要支持的流量量级是？</li><li><strong>面试官</strong>：目标是支持每日活跃用户数（DAU）达到 1000 万。</li><li><strong>候选人</strong>：Feed 是否支持富媒体内容？</li><li><strong>面试官</strong>：可以，允许图片和视频。</li></ul><h2 id="第二步-提出高层设计并获得认可" tabindex="-1"><a class="header-anchor" href="#第二步-提出高层设计并获得认可" aria-hidden="true">#</a> 第二步：提出高层设计并获得认可</h2><p>设计系统主要包含两个核心流程：</p><ol><li><strong>帖子发布</strong>：用户发布帖子后，相应数据会写入缓存和数据库，同时推送到好友的新闻推送中。</li><li><strong>新闻推送构建</strong>：通过聚合好友的帖子生成新闻推送。</li></ol><hr><h3 id="新闻推送-api-设计" tabindex="-1"><a class="header-anchor" href="#新闻推送-api-设计" aria-hidden="true">#</a> 新闻推送 API 设计</h3><p>新闻推送 API 是用户访问新闻的主要入口，以下是主要的 API 端点：</p><ul><li><code>POST /v1/me/feed</code>：发布新帖子，需提交 <code>content</code> 和 <code>auth_token</code>。</li><li><code>GET /v1/me/feed</code>：获取新闻推送，需提交 <code>auth_token</code>。</li></ul><hr><h3 id="帖子发布流程" tabindex="-1"><a class="header-anchor" href="#帖子发布流程" aria-hidden="true">#</a> 帖子发布流程</h3><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>用户通过 API 提交帖子内容。</li><li><strong>负载均衡器</strong>：将请求分发到 Web 服务器。</li><li><strong>Web 服务器</strong>：将请求路由到内部服务。</li><li><strong>发布服务</strong>：将帖子持久化到数据库并缓存。</li><li><strong>扩散服务</strong>：将帖子推送到好友的新闻推送中。</li><li><strong>通知服务</strong>：通知用户的好友内容已更新。</li></ol><hr><h3 id="新闻推送构建流程" tabindex="-1"><a class="header-anchor" href="#新闻推送构建流程" aria-hidden="true">#</a> 新闻推送构建流程</h3><figure><img src="'+l+'" alt="newsfeed-building" tabindex="0" loading="lazy"><figcaption>newsfeed-building</figcaption></figure><ol><li>用户发送获取新闻推送的请求。</li><li><strong>负载均衡器</strong>：将请求重定向至 Web 服务器。</li><li><strong>Web 服务器</strong>：将请求转发至新闻推送服务。</li><li><strong>新闻推送服务</strong>：从缓存中提取预计算的新闻推送。</li><li><strong>新闻推送缓存</strong>：保存好友帖子 ID 列表以便快速检索。</li></ol><h2 id="第三步-深入设计分析" tabindex="-1"><a class="header-anchor" href="#第三步-深入设计分析" aria-hidden="true">#</a> 第三步：深入设计分析</h2><p>接下来深入探讨帖子发布和新闻推送构建这两个核心流程。</p><h3 id="帖子发布流程-1" tabindex="-1"><a class="header-anchor" href="#帖子发布流程-1" aria-hidden="true">#</a> 帖子发布流程</h3><figure><img src="'+t+'" alt="feed-publishing-deep-dive" tabindex="0" loading="lazy"><figcaption>feed-publishing-deep-dive</figcaption></figure><p>Web 服务器，除了路由和身份验证，服务器还需应用限流机制以防垃圾信息泛滥。</p><h4 id="扩散服务" tabindex="-1"><a class="header-anchor" href="#扩散服务" aria-hidden="true">#</a> 扩散服务</h4><ul><li>扩散服务的职责是将帖子分发到好友的新闻推送中。</li><li>有两种主要策略： <ol><li><strong>写时扩散（Push Model）</strong>：帖子在发布时预先推送到好友的新闻推送中。 <ul><li><strong>优点</strong>：生成的新闻推送即时可用。</li><li><strong>缺点</strong>：对于好友数目多的用户，推送需要花费很多时间，导致发布帖子速度变慢，会导致热键问题。对于不活跃的用户，预计算推送也是一种浪费。</li></ul></li><li><strong>读时扩散（Pull Model）</strong>：帖子在好友请求新闻推送时动态生成。 <ul><li><strong>优点</strong>：更高效地服务不活跃用户。</li><li><strong>缺点</strong>：每次访问新闻推送都需要额外的计算，速度较慢。</li></ul></li></ol></li></ul><hr><h4 id="扩散服务架构" tabindex="-1"><a class="header-anchor" href="#扩散服务架构" aria-hidden="true">#</a> 扩散服务架构</h4><figure><img src="'+a+'" alt="fanout-service" tabindex="0" loading="lazy"><figcaption>fanout-service</figcaption></figure><ol><li>从图数据库中获取好友 ID 列表，图数据库适合管理朋友关系和推荐。</li><li>从用户缓存中获取朋友信息，此处会进行过滤，例如被屏蔽的朋友。</li><li>将好友列表和帖子 ID 推送至消息队列。</li><li>构建工作进程从消息队列中获取任务，并将新闻推送写入缓存。它们被存储为<code>&lt;post_id, user_id&gt;</code>映射，之后可以检索。</li></ol><hr><h3 id="新闻推送构建流程-1" tabindex="-1"><a class="header-anchor" href="#新闻推送构建流程-1" aria-hidden="true">#</a> 新闻推送构建流程</h3><figure><img src="'+o+'" alt="news-feed-retrieval-deep-dive" tabindex="0" loading="lazy"><figcaption>news-feed-retrieval-deep-dive</figcaption></figure><ol><li>用户发送请求以获取新闻推送。</li><li><strong>负载均衡器</strong>：分配请求到 Web 服务器。</li><li><strong>Web 服务器</strong>：转发请求至新闻推送服务。</li><li><strong>新闻推送服务</strong>：从缓存中获取好友帖子 ID 列表。</li><li><strong>内容加载</strong>：根据帖子 ID 加载对应的帖子内容和用户信息。</li><li><strong>返回结果</strong>：生成的 JSON 数据通过 API 返回客户端。</li><li><strong>媒体文件优化</strong>：图片和视频存储在 CDN 中以提高加载速度。</li></ol><hr><h3 id="缓存架构设计" tabindex="-1"><a class="header-anchor" href="#缓存架构设计" aria-hidden="true">#</a> 缓存架构设计</h3><p>缓存是新闻推送系统的重要组成部分，分为以下五个层次：</p><figure><img src="'+d+'" alt="cache-layer" tabindex="0" loading="lazy"><figcaption>cache-layer</figcaption></figure><ol><li><strong>新闻推送缓存</strong>：保存新闻推送中的帖子 ID 列表。</li><li><strong>内容缓存</strong>：存储每个帖子的详细信息，包括文本、图片等，热门内容存储在热缓存中。</li><li><strong>社交图谱缓存</strong>：保存好友关系和推荐信息。</li><li><strong>操作缓存</strong>：记录用户点赞、评论等操作。</li><li><strong>计数器缓存</strong>：存储帖子点赞数、评论数、关注数等计数器。</li></ol><h2 id="第四步-总结与讨论" tabindex="-1"><a class="header-anchor" href="#第四步-总结与讨论" aria-hidden="true">#</a> 第四步：总结与讨论</h2><p>我们设计了一个新闻推送，涵盖了两个主要用例：<strong>帖子发布</strong>和<strong>新闻推送构建</strong>。</p><h3 id="与扩展性相关的讨论点" tabindex="-1"><a class="header-anchor" href="#与扩展性相关的讨论点" aria-hidden="true">#</a> 与扩展性相关的讨论点</h3><ul><li>垂直扩展 vs. 水平扩展</li><li>SQL vs. NoSQL 数据库选择</li><li>数据库主从复制与读取副本</li><li>数据一致性模型</li><li>数据库分片设计</li></ul><h3 id="其他讨论点" tabindex="-1"><a class="header-anchor" href="#其他讨论点" aria-hidden="true">#</a> 其他讨论点</h3><ul><li>保持 Web 层无状态。</li><li>广泛使用缓存以优化性能。</li><li>支持多数据中心部署以提高可靠性。</li><li>利用消息队列解耦组件。</li><li>监控系统关键指标，如 QPS 和延迟，确保高性能和稳定性。</li></ul>',47),c=[h];function f(u,p){return e(),r("div",null,c)}const b=i(g,[["render",f],["__file","31_design_a_news_feed_system.html.vue"]]);export{b as default};
