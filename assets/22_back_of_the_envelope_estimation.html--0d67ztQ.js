import{_ as i,o as l,c as e,a}from"./app-zPI8OJ9F.js";const t="/assets/system-design-22-v8O7Xb2T.png",n="/assets/system-design-23-qZaRoqCR.png",s={},r=a('<h1 id="_2-粗略估算" tabindex="-1"><a class="header-anchor" href="#_2-粗略估算" aria-hidden="true">#</a> 2. 粗略估算</h1><p>在系统设计面试中，有时会被要求估算性能要求或系统容量，这些通常是通过思维实验和常见的性能数据进行估算的。（by Jeff Dean - Google 资深工程师）</p><p>要有效地进行这种估算，有一些机制是我们需要了解的。</p><h2 id="二的幂" tabindex="-1"><a class="header-anchor" href="#二的幂" aria-hidden="true">#</a> 二的幂</h2><p>数据量可能非常庞大，但计算归结为基础的数学。</p><p>为了进行精确计算，您需要了解二的幂，它与给定的数据单位对应：</p><ul><li>2^10 == ~1000 == 1kb</li><li>2^20 == ~1 百万 == 1mb</li><li>2^30 == ~10 亿 == 1gb</li><li>2^40 == ~1 万亿 == 1tb</li><li>2^50 == ~1 千万亿 == 1pb</li></ul><h2 id="每个程序员应了解的延迟数值" tabindex="-1"><a class="header-anchor" href="#每个程序员应了解的延迟数值" aria-hidden="true">#</a> 每个程序员应了解的延迟数值</h2><p>有一个广为人知的表格，列出了典型计算机操作的持续时间，由 Jeff Dean 创建。</p><p>由于硬件的改进，这些数值可能略显过时，但它们仍然提供了操作之间的相对度量：</p><ul><li>L1 缓存访问 == 0.5ns</li><li>分支预测错误 == 5ns</li><li>L2 缓存访问 == 7ns</li><li>互斥锁的锁定/解锁 == 100ns</li><li>主内存访问 == 100ns</li><li>压缩 1kb == 10,000ns == 10 微秒</li><li>通过 1gbps 网络发送 2kb == 20,000ns == 20 微秒</li><li>从内存中顺序读取 1mb == 250 微秒</li><li>同一数据中心的往返 == 500 微秒</li><li>硬盘寻址 == 10 毫秒</li><li>从网络顺序读取 1mb == 10 毫秒</li><li>从硬盘顺序读取 1mb == 30 毫秒</li><li>从加利福尼亚发送数据包到荷兰再返回加利福尼亚 == 150 毫秒</li></ul><p>一个很好的可视化图：</p><figure><img src="'+t+'" alt="latency-numbers-visu" tabindex="0" loading="lazy"><figcaption>latency-numbers-visu</figcaption></figure><p>从上述数值中可以得出一些结论：</p><ul><li>内存很快，硬盘很慢</li><li>如果可能，避免硬盘寻址</li><li>压缩通常很快</li><li>如果可能，发送数据前先压缩</li><li>数据中心的往返延迟较贵</li></ul><h2 id="可用性数值" tabindex="-1"><a class="header-anchor" href="#可用性数值" aria-hidden="true">#</a> 可用性数值</h2><p>高可用性 == 系统持续可操作的能力。换句话说，就是最小化停机时间。</p><p>通常，服务的可用性目标在 99%到 100%之间。</p><p>SLA（服务水平协议）是服务提供商和客户之间的正式协议。它正式定义了您的服务需要支持的正常运行时间水平。</p><p>云服务提供商通常将其正常运行时间定为 99.9%或更高。例如，AWS EC2 的 SLA 为 99.99%。</p><p>以下是不同 SLA 下允许的停机时间总结：</p><figure><img src="'+n+'" alt="sla-chart" tabindex="0" loading="lazy"><figcaption>sla-chart</figcaption></figure><h2 id="示例-估算-twitter-的-qps-和存储需求" tabindex="-1"><a class="header-anchor" href="#示例-估算-twitter-的-qps-和存储需求" aria-hidden="true">#</a> 示例 - 估算 Twitter 的 QPS 和存储需求</h2><p>假设：</p><ul><li>3 亿月活跃用户（MAU）</li><li>50%的用户每天使用 Twitter</li><li>用户平均每天发布 2 条推文</li><li>10%的推文包含媒体</li><li>数据存储 5 年</li></ul><p>估算：</p><ul><li>写入请求每秒（RPS）估算： <ul><li>(150 百万 * 2) / (24 小时 * 60 分钟 * 60 秒) = 每秒 3400-3600 条推文</li><li>峰值=7000TPS</li></ul></li><li>媒体存储量估算： <ul><li>每天媒体文件存储量 300 百万 * 10% == 30 百万</li><li>如果假设每个媒体文件为 1MB -&gt; 30 百万 * 1MB = 每天 30TB</li><li>5 年后 -&gt; 30TB * 365 * 5 == 55PB</li></ul></li><li>推文存储估算： <ul><li>1 条推文：64 字节 ID + 140 字节文本 + 1000 字节元数据 == 1MB</li><li>每天写入推文：3500 * 60 * 60 * 24 = 302MB</li><li>5 年后 -&gt; 302MB * 365 * 5 == 551GB</li></ul></li></ul><h2 id="提示" tabindex="-1"><a class="header-anchor" href="#提示" aria-hidden="true">#</a> 提示</h2><p>粗略估算关注的是过程，而非结果。面试官可能会测试你的问题解决能力。</p><p>一些提示供您参考：</p><ul><li>四舍五入和近似——不要试图计算 99987/9.1，而是四舍五入为 100000/10，这样更容易计算。</li><li>在进行估算之前，先写下您的假设</li><li>明确标记单位，写作 5MB，而不是仅写 5。</li><li>常见的估算问题——QPS（每秒查询次数）、峰值 QPS、存储、缓存、服务器数量。</li></ul>',31),p=[r];function h(c,d){return l(),e("div",null,p)}const u=i(s,[["render",h],["__file","22_back_of_the_envelope_estimation.html.vue"]]);export{u as default};
