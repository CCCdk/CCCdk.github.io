import{_ as a,o as n,c as s,a as e}from"./app-zPI8OJ9F.js";const r={},t=e(`<h1 id="_9-api-模式" tabindex="-1"><a class="header-anchor" href="#_9-api-模式" aria-hidden="true">#</a> 9. API 模式</h1><p>API，即应用程序编程接口，是一组允许不同软件应用程序相互通信的规则和工具。API 通常用于请求其他应用程序的数据或服务，尤其是在 Web 环境中。它们可以简单到在浏览器中访问本地存储，也可以复杂到与云服务进行交互。</p><p>API 是现代 Web 开发中的核心工具，在本文中，我们将探讨三种常见的 API 模式：REST、GraphQL 和 gRPC，重点介绍它们的定义、关键概念以及各自的优缺点。</p><h2 id="rest-api" tabindex="-1"><a class="header-anchor" href="#rest-api" aria-hidden="true">#</a> REST API</h2><h3 id="什么是-rest" tabindex="-1"><a class="header-anchor" href="#什么是-rest" aria-hidden="true">#</a> 什么是 REST？</h3><p>REST（表述性状态转移）是一种设计网络应用的架构风格。与协议不同，REST 是创建可扩展 Web 服务的指导原则。REST API 通常基于 HTTP 协议，并且是无状态的，这意味着从客户端到服务器的每个请求必须包含理解和处理该请求所需的所有信息。</p><h4 id="rest-的关键特点" tabindex="-1"><a class="header-anchor" href="#rest-的关键特点" aria-hidden="true">#</a> REST 的关键特点</h4><ul><li><strong>无状态性</strong>：服务器不会在请求之间存储客户端的上下文。</li><li><strong>资源</strong>：在 REST 中，一切都被视为资源，每个资源通过 URL 进行标识。</li><li><strong>HTTP 方法</strong>：REST 使用标准的 HTTP 方法，如 GET、POST、PUT、DELETE 等，来对资源进行操作。</li><li><strong>可扩展性</strong>：REST 的无状态特性支持水平扩展，多个服务器可以处理请求，而无需共享状态信息。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>无状态性带来的一个挑战是如何管理大数据集。REST 通过分页来处理这个问题，允许客户端请求特定的数据子集。</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>GET /videos?limit=10&amp;offset=20
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个例子中，客户端请求从第 21 个视频开始的 10 个视频。通过这种方式，服务器不需要记住客户端的先前请求，从而实现高效的扩展。</p><h2 id="graphql" tabindex="-1"><a class="header-anchor" href="#graphql" aria-hidden="true">#</a> GraphQL</h2><h3 id="什么是-graphql" tabindex="-1"><a class="header-anchor" href="#什么是-graphql" aria-hidden="true">#</a> 什么是 GraphQL？</h3><p>GraphQL 是由 Facebook 于 2015 年开发的一种 API 查询语言，并且它也是一个执行这些查询的运行时。与每个资源都有自己端点的 REST 不同，GraphQL 允许客户端在单次查询中请求准确所需的数据。这种灵活性减少了数据的过度获取和不足获取。</p><h4 id="graphql-的关键特点" tabindex="-1"><a class="header-anchor" href="#graphql-的关键特点" aria-hidden="true">#</a> GraphQL 的关键特点</h4><ul><li><strong>单一端点</strong>：无论请求类型如何，GraphQL 只通过一个端点进行操作。</li><li><strong>查询灵活性</strong>：客户端可以指定所需的字段，减少数据传输，提高性能。</li><li><strong>POST 请求</strong>：所有 GraphQL 查询都通过 HTTP POST 请求发送，查询内容包含在请求体中。</li></ul><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1" aria-hidden="true">#</a> 示例</h3><p>使用 GraphQL，客户端可以仅请求特定的数据字段，而无需获取多余的信息。例如，假设客户端只需要用户的头像和用户名，它可以这样请求：</p><div class="language-graphql line-numbers-mode" data-ext="graphql"><pre class="language-graphql"><code><span class="token keyword">query</span> <span class="token punctuation">{</span>
	<span class="token property-query">user</span><span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token property">profilePicture</span>
		<span class="token property">username</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该查询仅返回指定的字段，从而优化了数据传输并减少了服务器和客户端的负担。</p><h2 id="grpc" tabindex="-1"><a class="header-anchor" href="#grpc" aria-hidden="true">#</a> gRPC</h2><h3 id="什么是-grpc" tabindex="-1"><a class="header-anchor" href="#什么是-grpc" aria-hidden="true">#</a> 什么是 gRPC？</h3><p>gRPC（Google Remote Procedure Call）是一个高性能的开源框架，它使用 HTTP/2 作为传输协议，使用协议缓冲（Protocol Buffers）作为接口描述语言，并提供认证、负载均衡等功能。gRPC 特别适合连接分布式系统中的微服务。</p><h4 id="grpc-的关键特点" tabindex="-1"><a class="header-anchor" href="#grpc-的关键特点" aria-hidden="true">#</a> gRPC 的关键特点</h4><ul><li><strong>HTTP/2</strong>：支持多路复用，允许多个请求在同一连接上发送。</li><li><strong>协议缓冲（Protocol Buffers）</strong>：gRPC 使用 Protocol Buffers 进行序列化，比 JSON 更高效。</li><li><strong>双向流式传输</strong>：gRPC 支持双向流式传输，允许客户端和服务器之间发送一系列消息。</li></ul><h3 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2" aria-hidden="true">#</a> 示例</h3><p>在 gRPC 中，服务是通过 Protobuf 定义的，服务器实现这些服务。以下是一个简单的示例：</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">service</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>
  <span class="token keyword">rpc</span> <span class="token function">SayHello</span> <span class="token punctuation">(</span><span class="token class-name">HelloRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">HelloReply</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">message</span> <span class="token class-name">HelloRequest</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">message</span> <span class="token class-name">HelloReply</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 Protobuf 定义了一个 <code>Greeter</code> 服务，包含一个 <code>SayHello</code> 方法。客户端发送一个 <code>HelloRequest</code>，服务器回应一个 <code>HelloReply</code>。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>REST、GraphQL 和 gRPC 各自有不同的优缺点：</p><ul><li><strong>REST</strong> 适用于需要可扩展性和简洁性的标准 Web 服务。</li><li><strong>GraphQL</strong> 提供了灵活性和数据获取效率，非常适合复杂的前端应用。</li><li><strong>gRPC</strong> 在高性能的微服务环境中表现优越，特别是在需要低延迟和高效通信的场景中。</li></ul><p>了解这些 API 模式及其适用场景，对于软件开发至关重要。</p>`,34),i=[t];function l(p,o){return n(),s("div",null,i)}const d=a(r,[["render",l],["__file","8_api_paradigms.html.vue"]]);export{d as default};
